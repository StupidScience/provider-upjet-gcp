// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServicePerimeterIngressPolicyIngressFromInitParameters struct {

	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	Identities []*string `json:"identities,omitempty" tf:"identities,omitempty"`

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	IdentityType *string `json:"identityType,omitempty" tf:"identity_type,omitempty"`

	// Sources that this IngressPolicy authorizes access from.
	// Structure is documented below.
	Sources []ServicePerimeterIngressPolicyIngressFromSourcesInitParameters `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ServicePerimeterIngressPolicyIngressFromObservation struct {

	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	Identities []*string `json:"identities,omitempty" tf:"identities,omitempty"`

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	IdentityType *string `json:"identityType,omitempty" tf:"identity_type,omitempty"`

	// Sources that this IngressPolicy authorizes access from.
	// Structure is documented below.
	Sources []ServicePerimeterIngressPolicyIngressFromSourcesObservation `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ServicePerimeterIngressPolicyIngressFromParameters struct {

	// A list of identities that are allowed access through this ingress policy.
	// Should be in the format of email address. The email address should represent
	// individual user or service account only.
	// +kubebuilder:validation:Optional
	Identities []*string `json:"identities,omitempty" tf:"identities,omitempty"`

	// Specifies the type of identities that are allowed access from outside the
	// perimeter. If left unspecified, then members of identities field will be
	// allowed access.
	// Possible values are: ANY_IDENTITY, ANY_USER_ACCOUNT, ANY_SERVICE_ACCOUNT.
	// +kubebuilder:validation:Optional
	IdentityType *string `json:"identityType,omitempty" tf:"identity_type,omitempty"`

	// Sources that this IngressPolicy authorizes access from.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Sources []ServicePerimeterIngressPolicyIngressFromSourcesParameters `json:"sources,omitempty" tf:"sources,omitempty"`
}

type ServicePerimeterIngressPolicyIngressFromSourcesInitParameters struct {

	// An AccessLevel resource name that allow resources within the
	// ServicePerimeters to be accessed from the internet. AccessLevels listed
	// must be in the same policy as this ServicePerimeter. Referencing a nonexistent
	// AccessLevel will cause an error. If no AccessLevel names are listed,
	// resources within the perimeter can only be accessed via Google Cloud calls
	// with request origins within the perimeter.
	// Example accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.
	// If * is specified, then all IngressSources will be allowed.
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// A Google Cloud resource that is allowed to ingress the perimeter.
	// Requests from these resources will be allowed to access perimeter data.
	// Currently only projects and VPCs are allowed.
	// Project format: projects/{projectNumber}
	// VPC network format:
	// //compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}.
	// The project may be in any Google Cloud organization, not just the
	// organization that the perimeter is defined in. * is not allowed, the case
	// of allowing all Google Cloud resources only is not supported.
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`
}

type ServicePerimeterIngressPolicyIngressFromSourcesObservation struct {

	// An AccessLevel resource name that allow resources within the
	// ServicePerimeters to be accessed from the internet. AccessLevels listed
	// must be in the same policy as this ServicePerimeter. Referencing a nonexistent
	// AccessLevel will cause an error. If no AccessLevel names are listed,
	// resources within the perimeter can only be accessed via Google Cloud calls
	// with request origins within the perimeter.
	// Example accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.
	// If * is specified, then all IngressSources will be allowed.
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// A Google Cloud resource that is allowed to ingress the perimeter.
	// Requests from these resources will be allowed to access perimeter data.
	// Currently only projects and VPCs are allowed.
	// Project format: projects/{projectNumber}
	// VPC network format:
	// //compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}.
	// The project may be in any Google Cloud organization, not just the
	// organization that the perimeter is defined in. * is not allowed, the case
	// of allowing all Google Cloud resources only is not supported.
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`
}

type ServicePerimeterIngressPolicyIngressFromSourcesParameters struct {

	// An AccessLevel resource name that allow resources within the
	// ServicePerimeters to be accessed from the internet. AccessLevels listed
	// must be in the same policy as this ServicePerimeter. Referencing a nonexistent
	// AccessLevel will cause an error. If no AccessLevel names are listed,
	// resources within the perimeter can only be accessed via Google Cloud calls
	// with request origins within the perimeter.
	// Example accessPolicies/MY_POLICY/accessLevels/MY_LEVEL.
	// If * is specified, then all IngressSources will be allowed.
	// +kubebuilder:validation:Optional
	AccessLevel *string `json:"accessLevel,omitempty" tf:"access_level,omitempty"`

	// A Google Cloud resource that is allowed to ingress the perimeter.
	// Requests from these resources will be allowed to access perimeter data.
	// Currently only projects and VPCs are allowed.
	// Project format: projects/{projectNumber}
	// VPC network format:
	// //compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}.
	// The project may be in any Google Cloud organization, not just the
	// organization that the perimeter is defined in. * is not allowed, the case
	// of allowing all Google Cloud resources only is not supported.
	// +kubebuilder:validation:Optional
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`
}

type ServicePerimeterIngressPolicyIngressToInitParameters struct {

	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	Operations []ServicePerimeterIngressPolicyIngressToOperationsInitParameters `json:"operations,omitempty" tf:"operations,omitempty"`

	// A list of resources, currently only projects in the form
	// projects/<projectnumber>, protected by this ServicePerimeter
	// that are allowed to be accessed by sources defined in the
	// corresponding IngressFrom. A request matches if it contains
	// a resource in this list. If * is specified for resources,
	// then this IngressTo rule will authorize access to all
	// resources inside the perimeter, provided that the request
	// also matches the operations field.
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ServicePerimeterIngressPolicyIngressToObservation struct {

	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	Operations []ServicePerimeterIngressPolicyIngressToOperationsObservation `json:"operations,omitempty" tf:"operations,omitempty"`

	// A list of resources, currently only projects in the form
	// projects/<projectnumber>, protected by this ServicePerimeter
	// that are allowed to be accessed by sources defined in the
	// corresponding IngressFrom. A request matches if it contains
	// a resource in this list. If * is specified for resources,
	// then this IngressTo rule will authorize access to all
	// resources inside the perimeter, provided that the request
	// also matches the operations field.
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ServicePerimeterIngressPolicyIngressToOperationsInitParameters struct {

	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	MethodSelectors []ServicePerimeterIngressPolicyIngressToOperationsMethodSelectorsInitParameters `json:"methodSelectors,omitempty" tf:"method_selectors,omitempty"`

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type ServicePerimeterIngressPolicyIngressToOperationsMethodSelectorsInitParameters struct {

	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`
}

type ServicePerimeterIngressPolicyIngressToOperationsMethodSelectorsObservation struct {

	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`
}

type ServicePerimeterIngressPolicyIngressToOperationsMethodSelectorsParameters struct {

	// Value for method should be a valid method name for the corresponding
	// serviceName in ApiOperation. If * used as value for method, then
	// ALL methods and permissions are allowed.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Value for permission should be a valid Cloud IAM permission for the
	// corresponding serviceName in ApiOperation.
	// +kubebuilder:validation:Optional
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`
}

type ServicePerimeterIngressPolicyIngressToOperationsObservation struct {

	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	MethodSelectors []ServicePerimeterIngressPolicyIngressToOperationsMethodSelectorsObservation `json:"methodSelectors,omitempty" tf:"method_selectors,omitempty"`

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type ServicePerimeterIngressPolicyIngressToOperationsParameters struct {

	// API methods or permissions to allow. Method or permission must belong to
	// the service specified by serviceName field. A single MethodSelector entry
	// with * specified for the method field will allow all methods AND
	// permissions for the service specified in serviceName.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MethodSelectors []ServicePerimeterIngressPolicyIngressToOperationsMethodSelectorsParameters `json:"methodSelectors,omitempty" tf:"method_selectors,omitempty"`

	// The name of the API whose methods or permissions the IngressPolicy or
	// EgressPolicy want to allow. A single ApiOperation with serviceName
	// field set to * will allow all methods AND permissions for all services.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`
}

type ServicePerimeterIngressPolicyIngressToParameters struct {

	// A list of ApiOperations the sources specified in corresponding IngressFrom
	// are allowed to perform in this ServicePerimeter.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	Operations []ServicePerimeterIngressPolicyIngressToOperationsParameters `json:"operations,omitempty" tf:"operations,omitempty"`

	// A list of resources, currently only projects in the form
	// projects/<projectnumber>, protected by this ServicePerimeter
	// that are allowed to be accessed by sources defined in the
	// corresponding IngressFrom. A request matches if it contains
	// a resource in this list. If * is specified for resources,
	// then this IngressTo rule will authorize access to all
	// resources inside the perimeter, provided that the request
	// also matches the operations field.
	// +kubebuilder:validation:Optional
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`
}

type ServicePerimeterIngressPolicyInitParameters struct {

	// Defines the conditions on the source of a request causing this IngressPolicy
	// to apply.
	// Structure is documented below.
	IngressFrom *ServicePerimeterIngressPolicyIngressFromInitParameters `json:"ingressFrom,omitempty" tf:"ingress_from,omitempty"`

	// Defines the conditions on the ApiOperation and request destination that cause
	// this IngressPolicy to apply.
	// Structure is documented below.
	IngressTo *ServicePerimeterIngressPolicyIngressToInitParameters `json:"ingressTo,omitempty" tf:"ingress_to,omitempty"`

	// The name of the Service Perimeter to add this resource to.
	Perimeter *string `json:"perimeter,omitempty" tf:"perimeter,omitempty"`
}

type ServicePerimeterIngressPolicyObservation struct {

	// an identifier for the resource with format {{perimeter}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Defines the conditions on the source of a request causing this IngressPolicy
	// to apply.
	// Structure is documented below.
	IngressFrom *ServicePerimeterIngressPolicyIngressFromObservation `json:"ingressFrom,omitempty" tf:"ingress_from,omitempty"`

	// Defines the conditions on the ApiOperation and request destination that cause
	// this IngressPolicy to apply.
	// Structure is documented below.
	IngressTo *ServicePerimeterIngressPolicyIngressToObservation `json:"ingressTo,omitempty" tf:"ingress_to,omitempty"`

	// The name of the Service Perimeter to add this resource to.
	Perimeter *string `json:"perimeter,omitempty" tf:"perimeter,omitempty"`
}

type ServicePerimeterIngressPolicyParameters struct {

	// Defines the conditions on the source of a request causing this IngressPolicy
	// to apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	IngressFrom *ServicePerimeterIngressPolicyIngressFromParameters `json:"ingressFrom,omitempty" tf:"ingress_from,omitempty"`

	// Defines the conditions on the ApiOperation and request destination that cause
	// this IngressPolicy to apply.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	IngressTo *ServicePerimeterIngressPolicyIngressToParameters `json:"ingressTo,omitempty" tf:"ingress_to,omitempty"`

	// The name of the Service Perimeter to add this resource to.
	// +kubebuilder:validation:Optional
	Perimeter *string `json:"perimeter,omitempty" tf:"perimeter,omitempty"`
}

// ServicePerimeterIngressPolicySpec defines the desired state of ServicePerimeterIngressPolicy
type ServicePerimeterIngressPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServicePerimeterIngressPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServicePerimeterIngressPolicyInitParameters `json:"initProvider,omitempty"`
}

// ServicePerimeterIngressPolicyStatus defines the observed state of ServicePerimeterIngressPolicy.
type ServicePerimeterIngressPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServicePerimeterIngressPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ServicePerimeterIngressPolicy is the Schema for the ServicePerimeterIngressPolicys API. Manage a single IngressPolicy in the 'status' (enforced) configuration for a service perimeter.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type ServicePerimeterIngressPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ingressFrom) || (has(self.initProvider) && has(self.initProvider.ingressFrom))",message="spec.forProvider.ingressFrom is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ingressTo) || (has(self.initProvider) && has(self.initProvider.ingressTo))",message="spec.forProvider.ingressTo is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.perimeter) || (has(self.initProvider) && has(self.initProvider.perimeter))",message="spec.forProvider.perimeter is a required parameter"
	Spec   ServicePerimeterIngressPolicySpec   `json:"spec"`
	Status ServicePerimeterIngressPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicePerimeterIngressPolicyList contains a list of ServicePerimeterIngressPolicys
type ServicePerimeterIngressPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServicePerimeterIngressPolicy `json:"items"`
}

// Repository type metadata.
var (
	ServicePerimeterIngressPolicy_Kind             = "ServicePerimeterIngressPolicy"
	ServicePerimeterIngressPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServicePerimeterIngressPolicy_Kind}.String()
	ServicePerimeterIngressPolicy_KindAPIVersion   = ServicePerimeterIngressPolicy_Kind + "." + CRDGroupVersion.String()
	ServicePerimeterIngressPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ServicePerimeterIngressPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ServicePerimeterIngressPolicy{}, &ServicePerimeterIngressPolicyList{})
}
